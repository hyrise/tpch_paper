Markus.Dreseler@nemea:~/hyrise/build-release/paper_results/cp32_locality$ gd
diff --git a/src/lib/operators/table_scan/abstract_dereferenced_column_table_scan_impl.hpp b/src/lib/operators/table_scan/abstract_dereferenced_column_table_scan_impl.hpp
index a54285a1d..d226f6df7 100644
--- a/src/lib/operators/table_scan/abstract_dereferenced_column_table_scan_impl.hpp
+++ b/src/lib/operators/table_scan/abstract_dereferenced_column_table_scan_impl.hpp
@@ -29,7 +29,7 @@ class AbstractDereferencedColumnTableScanImpl : public AbstractTableScanImpl {

   std::shared_ptr<PosList> scan_chunk(const ChunkID chunk_id) const override;

-  const PredicateCondition predicate_condition;
+  mutable PredicateCondition predicate_condition;

  protected:
   void _scan_reference_segment(const ReferenceSegment& segment, const ChunkID chunk_id, PosList& matches) const;
diff --git a/src/lib/operators/table_scan/column_between_table_scan_impl.cpp b/src/lib/operators/table_scan/column_between_table_scan_impl.cpp
index 6e004aa6b..aa6b3d40c 100644
--- a/src/lib/operators/table_scan/column_between_table_scan_impl.cpp
+++ b/src/lib/operators/table_scan/column_between_table_scan_impl.cpp
@@ -88,24 +88,30 @@ void ColumnBetweenTableScanImpl::_scan_dictionary_segment(const BaseDictionarySe

   auto attribute_vector_iterable = create_iterable_from_attribute_vector(segment);

-  /**
-   * Early out: All entries (except NULLs) match
-   */
-  // NOLINTNEXTLINE - cpplint is drunk
-  if (lower_bound_value_id == ValueID{0} && upper_bound_value_id == INVALID_VALUE_ID) {
-    attribute_vector_iterable.with_iterators(position_filter, [&](auto left_it, auto left_end) {
-      static const auto always_true = [](const auto&) { return true; };
-      _scan_with_iterators<true>(always_true, left_it, left_end, chunk_id, matches);
-    });
-
-    return;
-  }
+  // /**
+  //  * Early out: All entries (except NULLs) match
+  //  */
+  // // NOLINTNEXTLINE - cpplint is drunk
+  // if (lower_bound_value_id == ValueID{0} && upper_bound_value_id == INVALID_VALUE_ID) {
+  //   attribute_vector_iterable.with_iterators(position_filter, [&](auto left_it, auto left_end) {
+  //     static const auto always_true = [](const auto&) { return true; };
+  //     _scan_with_iterators<true>(always_true, left_it, left_end, chunk_id, matches);
+  //   });
+
+  //   return;
+  // }
+
+  // /**
+  //  * Early out: No entries match
+  //  */
+  // if (lower_bound_value_id == INVALID_VALUE_ID || lower_bound_value_id >= upper_bound_value_id) {
+  //   return;
+  // }

-  /**
-   * Early out: No entries match
-   */
   if (lower_bound_value_id == INVALID_VALUE_ID || lower_bound_value_id >= upper_bound_value_id) {
-    return;
+    // Need to repair the value ids if the shortcut is not taken
+    lower_bound_value_id = 0;
+    upper_bound_value_id = 0;
   }

   /**
diff --git a/src/lib/operators/table_scan/column_like_table_scan_impl.cpp b/src/lib/operators/table_scan/column_like_table_scan_impl.cpp
index 0607fe724..72bce40f3 100644
--- a/src/lib/operators/table_scan/column_like_table_scan_impl.cpp
+++ b/src/lib/operators/table_scan/column_like_table_scan_impl.cpp
@@ -81,25 +81,25 @@ void ColumnLikeTableScanImpl::_scan_dictionary_segment(const BaseDictionarySegme
     result = _find_matches_in_dictionary(*typed_segment.fixed_string_dictionary());
   }

-  const auto& match_count = result.first;
+  // const auto& match_count = result.first;
   const auto& dictionary_matches = result.second;

   auto attribute_vector_iterable = create_iterable_from_attribute_vector(segment);

-  // LIKE matches all rows, but we still need to check for NULL
-  if (match_count == dictionary_matches.size()) {
-    attribute_vector_iterable.with_iterators(position_filter, [&](auto it, auto end) {
-      static const auto always_true = [](const auto&) { return true; };
-      _scan_with_iterators<true>(always_true, it, end, chunk_id, matches);
-    });
+  // // LIKE matches all rows, but we still need to check for NULL
+  // if (match_count == dictionary_matches.size()) {
+  //   attribute_vector_iterable.with_iterators(position_filter, [&](auto it, auto end) {
+  //     static const auto always_true = [](const auto&) { return true; };
+  //     _scan_with_iterators<true>(always_true, it, end, chunk_id, matches);
+  //   });

-    return;
-  }
+  //   return;
+  // }

-  // LIKE matches no rows
-  if (match_count == 0u) {
-    return;
-  }
+  // // LIKE matches no rows
+  // if (match_count == 0u) {
+  //   return;
+  // }

   const auto dictionary_lookup = [&dictionary_matches](const auto& position) {
     return dictionary_matches[position.value()];
diff --git a/src/lib/operators/table_scan/column_vs_value_table_scan_impl.cpp b/src/lib/operators/table_scan/column_vs_value_table_scan_impl.cpp
index 5cc94393f..6f0061658 100644
--- a/src/lib/operators/table_scan/column_vs_value_table_scan_impl.cpp
+++ b/src/lib/operators/table_scan/column_vs_value_table_scan_impl.cpp
@@ -88,7 +88,7 @@ void ColumnVsValueTableScanImpl::_scan_dictionary_segment(const BaseDictionarySe
    * column >= value  |  value_id >= dict.lower_bound(value)
    */

-  const auto search_value_id = _get_search_value_id(segment);
+  auto search_value_id = _get_search_value_id(segment);

   /**
    * Early Outs
@@ -104,18 +104,20 @@ void ColumnVsValueTableScanImpl::_scan_dictionary_segment(const BaseDictionarySe

   auto iterable = create_iterable_from_attribute_vector(segment);

-  if (_value_matches_all(segment, search_value_id)) {
-    iterable.with_iterators(position_filter, [&](auto it, auto end) {
-      static const auto always_true = [](const auto&) { return true; };
-      // Matches all, so include all rows except those with NULLs in the result.
-      _scan_with_iterators<true>(always_true, it, end, chunk_id, matches);
-    });
+  // if (_value_matches_all(segment, search_value_id)) {
+  //   iterable.with_iterators(position_filter, [&](auto it, auto end) {
+  //     static const auto always_true = [](const auto&) { return true; };
+  //     // Matches all, so include all rows except those with NULLs in the result.
+  //     _scan_with_iterators<true>(always_true, it, end, chunk_id, matches);
+  //   });

-    return;
-  }
+  //   return;
+  // }

   if (_value_matches_none(segment, search_value_id)) {
-    return;
+    // Fix comparison
+    predicate_condition = PredicateCondition::Equals;
+    search_value_id = INVALID_VALUE_ID - 1;
   }

   _with_operator_for_dict_segment_scan([&](auto predicate_comparator) {
diff --git a/src/lib/optimizer/optimizer.cpp b/src/lib/optimizer/optimizer.cpp
index 916d2dbb6..2959fc51c 100644
--- a/src/lib/optimizer/optimizer.cpp
+++ b/src/lib/optimizer/optimizer.cpp
@@ -97,7 +97,7 @@ std::shared_ptr<Optimizer> Optimizer::create_default_optimizer() {
   optimizer->add_rule(std::make_unique<ExpressionReductionRule>());

   // TODO this happens below again, do we need it twice?
-  optimizer->add_rule(std::make_unique<ChunkPruningRule>());
+  // optimizer->add_rule(std::make_unique<ChunkPruningRule>());

   // Run before the JoinOrderingRule so that the latter has simple (non-conjunctive) predicates. However, as the
   // JoinOrderingRule cannot handle UnionNodes (#1829), do not split disjunctions just yet.
@@ -119,7 +119,7 @@ std::shared_ptr<Optimizer> Optimizer::create_default_optimizer() {
   // to the StoredTableNode as possible where the ChunkPruningRule can work with them. On the other hand, run it before
   // the PredicateSplitUp WITH disjunction split up and before the SemiJoinReductionRule as it does not particularly
   // like diamonds.
-  optimizer->add_rule(std::make_unique<ChunkPruningRule>());
+  // optimizer->add_rule(std::make_unique<ChunkPruningRule>());

   optimizer->add_rule(std::make_unique<PredicateSplitUpRule>());

Markus.Dreseler@nemea:~/hyrise/build-release/paper_results/cp32_locality$