diff --git a/src/lib/optimizer/optimizer.cpp b/src/lib/optimizer/optimizer.cpp
index 9f34e3c88..a769d30f2 100644
--- a/src/lib/optimizer/optimizer.cpp
+++ b/src/lib/optimizer/optimizer.cpp
@@ -116,12 +116,6 @@ std::shared_ptr<Optimizer> Optimizer::create_default_optimizer() {
   // Bring predicates into the desired order once the PredicatePlacementRule has positioned them as desired
   optimizer->add_rule(std::make_unique<PredicateReorderingRule>());

-  // Before the IN predicate is rewritten, it should have been moved to a good position. Also, while the IN predicate
-  // might become a join, it is semantically more similar to a predicate. If we run this rule too early, it might
-  // hinder other optimizations that stop at joins. For example, the join ordering currently does not know about semi
-  // joins and would not recognize such a rewritten predicate.
-  optimizer->add_rule(std::make_unique<InExpressionRewriteRule>());
-
   optimizer->add_rule(std::make_unique<IndexScanRule>());

   return optimizer;